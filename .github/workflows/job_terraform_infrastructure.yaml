name: Terraform Infrastructure

on:
    workflow_call:
        inputs:
            terraform_action:
                description: "Terraform action to perform"
                required: true
                type: string
                # format, validate, plan, apply, destroy
            working_directory:
                description: "Terraform working directory"
                required: true
                type: string
            env_vars:
                description: "Additional environment variables (key=value format, new line separated)"
                required: false
                type: string
                default: ""
            output_names:
                description: "Terraform output names to extract (new line separated, only for apply action)"
                required: false
                type: string
                default: ""
        secrets:
            DIGITALOCEAN_ACCESS_TOKEN:
                description: "DigitalOcean access token"
                required: false # No requerido para format
            TF_API_TOKEN:
                description: "HCP Terraform Cloud API token"
                required: false # No requerido para format
        outputs:
            extracted_outputs:
                description: "Extracted specific outputs as name=value pairs"
                value: ${{ jobs.terraform.outputs.extracted_outputs }}

jobs:
    terraform:
        runs-on: ubuntu-latest
        outputs:
            extracted_outputs: ${{ steps.get-terraform-outputs.outputs.extracted_outputs }}
        env:
            TF_VAR_digitalocean_token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

        defaults:
            run:
                working-directory: ${{ inputs.working_directory }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                  terraform_version: "~1.13"
                  cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

            - name: Set additional environment variables
              if: inputs.env_vars != ''
              run: |
                  echo "Setting additional environment variables..."
                  while IFS= read -r line; do
                      if [[ -n "$line" && "$line" != \#* ]]; then
                          echo "$line" >> $GITHUB_ENV
                      fi
                  done <<< "${{ inputs.env_vars }}"
                  echo "‚úÖ Additional environment variables set successfully"

            - name: Terraform Init
              if: inputs.terraform_action != 'format'
              run: terraform init

            - name: Terraform Format Check and Apply
              if: inputs.terraform_action == 'format'
              run: |
                  echo "üé® Checking Terraform format..."

                  # Check format first
                  if terraform fmt -check -recursive; then
                      echo "‚úÖ All Terraform files are properly formatted"
                  else
                      echo "‚ö†Ô∏è Some Terraform files need formatting, applying format..."
                      terraform fmt -recursive
                      echo "‚úÖ Terraform formatting applied successfully"

                      # List formatted files
                      echo "üìù Files that were formatted:"
                      git diff --name-only || echo "No changes to show"
                  fi

            - name: Terraform Validate
              if: inputs.terraform_action == 'validate'
              run: |
                  echo "üîç Validating Terraform configuration..."
                  terraform validate
                  echo "‚úÖ Terraform configuration is valid"

            - name: Terraform Plan
              if: inputs.terraform_action == 'plan' || inputs.terraform_action == 'apply'
              run: |
                  echo "üìã Showing Terraform plan..."
                  terraform plan
                  echo "‚úÖ Terraform plan displayed"

            - name: Terraform Apply
              if: inputs.terraform_action == 'apply'
              run: |
                  echo "ÔøΩ Applying Terraform configuration..."
                  terraform apply -auto-approve
                  echo "‚úÖ Terraform apply completed successfully"
                  echo "### ‚úÖ Terraform Apply - Completed" >> $GITHUB_STEP_SUMMARY
                  echo "Terraform configuration has been applied successfully." >> $GITHUB_STEP_SUMMARY

            - name: Terraform Destroy
              if: inputs.terraform_action == 'destroy'
              run: |
                  echo "üóëÔ∏è Destroying Terraform infrastructure..."
                  terraform destroy -auto-approve
                  echo "‚úÖ Terraform destroy completed successfully"

            - name: Get Terraform Outputs
              if: (inputs.terraform_action == 'apply' && inputs.output_names != '')
              id: get-terraform-outputs
              run: |
                  echo "üéØ Getting Terraform outputs..."

                  OUTPUT_NAMES="${{ inputs.output_names }}"
                  EXTRACTED_OUTPUTS=""

                  if [[ -n "$OUTPUT_NAMES" ]]; then
                      echo "üìã Processing requested outputs..."

                      # Process each output name
                      while IFS= read -r output_name; do
                          # Skip empty lines and comments
                          if [[ -n "$output_name" && "$output_name" != \#* ]]; then
                              # Trim whitespace
                              output_name=$(echo "$output_name" | xargs)

                              echo "üîç Checking output: $output_name"

                              # Check if output exists and get its value
                              if terraform output "$output_name" >/dev/null 2>&1; then
                                  OUTPUT_VALUE=$(terraform output -raw "$output_name")

                                  # Add to extracted outputs
                                  if [[ -z "$EXTRACTED_OUTPUTS" ]]; then
                                      EXTRACTED_OUTPUTS="${output_name}=${OUTPUT_VALUE}"
                                  else
                                      EXTRACTED_OUTPUTS="${EXTRACTED_OUTPUTS}
                                      ${output_name}=${OUTPUT_VALUE}"
                                  fi

                                  echo "‚úÖ $output_name: $OUTPUT_VALUE"
                              else
                                  echo "‚ö†Ô∏è Output '$output_name' not found"

                                  # Add as N/A
                                  if [[ -z "$EXTRACTED_OUTPUTS" ]]; then
                                      EXTRACTED_OUTPUTS="${output_name}=N/A"
                                  else
                                      EXTRACTED_OUTPUTS="${EXTRACTED_OUTPUTS}
                                      ${output_name}=N/A"
                                  fi
                              fi
                          fi
                      done <<< "$OUTPUT_NAMES"

                      # Set the output for GitHub Actions
                      echo "extracted_outputs<<EOF" >> $GITHUB_OUTPUT
                      echo "$EXTRACTED_OUTPUTS" >> $GITHUB_OUTPUT
                      echo "EOF" >> $GITHUB_OUTPUT

                      # Add to step summary
                      echo "### üéØ Extracted Terraform Outputs" >> $GITHUB_STEP_SUMMARY
                      echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                      echo "$EXTRACTED_OUTPUTS" >> $GITHUB_STEP_SUMMARY
                      echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

                      echo "‚úÖ Successfully extracted outputs"
                  else
                      echo "‚ö†Ô∏è No output names specified"
                      echo "extracted_outputs=" >> $GITHUB_OUTPUT
                  fi
