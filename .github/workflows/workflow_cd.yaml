name: CD Workflow

on:
    workflow_dispatch:
        inputs:
            action:
                description: "Select the action to perform"
                required: true
                default: "deploy"
                type: choice
                options:
                    - deploy
            release_tag:
                description: "Release tag (e.g., v1.0.0)"
                required: true
                type: string
            is_pre_release:
                description: "Is this a pre-release?"
                required: true
                type: boolean
                default: false
            as_draft:
                description: "Create the release as a draft"
                required: true
                default: false
                type: boolean
            clean_registry:
                description: "Clean untagged images from the registry"
                required: false
                type: boolean
                default: false
jobs:
    check-branch:
        runs-on: ubuntu-latest
        outputs:
            can_deploy: ${{ steps.check.outputs.can_deploy }}
        steps:
            - name: Check if on main branch
              id: check
              run: |
                  if [[ "${{ github.ref_name }}" == "main" ]]; then
                      echo "can_deploy=true" >> $GITHUB_OUTPUT
                      echo "‚úÖ On main branch, can proceed with deployment"
                  else
                      echo "can_deploy=false" >> $GITHUB_OUTPUT
                      echo "‚ùå Not on main branch (current: ${{ github.ref_name }}). Deployment only allowed from main."
                      exit 1
                  fi
    frontend-lint:
        uses: ./.github/workflows/job_frontend_lint.yaml
        needs: check-branch
        if: needs.check-branch.outputs.can_deploy == 'true'
        with:
            node_version: "22"
    frontend-build-and-test:
        uses: ./.github/workflows/job_frontend_build_and_test.yaml
        needs: [check-branch, frontend-lint]
        if: |
            needs.check-branch.outputs.can_deploy == 'true' &&
            needs.frontend-lint.result == 'success'
        with:
            node_version: "22"
            run_tests: true
    backend-build-and-test:
        uses: ./.github/workflows/job_backend_build_and_test.yaml
        needs: [check-branch, frontend-lint]
        if: |
            needs.check-branch.outputs.can_deploy == 'true' &&
            needs.frontend-lint.result == 'success'
        with:
            dotnet_version: "8.0.x"
            run_tests: true
            configuration: "Release"
    docker-build-push:
        uses: ./.github/workflows/job_docker_build_push.yaml
        needs: [check-branch, frontend-build-and-test, backend-build-and-test]
        if: |
            needs.check-branch.outputs.can_deploy == 'true' &&
            needs.frontend-build-and-test.result == 'success' &&
            needs.backend-build-and-test.result == 'success'
        with:
            release_tag: ${{ github.event.inputs.release_tag }}
            image_name: ${{ vars.IMAGE_NAME }}
            clean_registry: ${{ github.event.inputs.clean_registry }}
        secrets:
            DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    create-release:
        runs-on: ubuntu-latest
        needs: [check-branch, docker-build-push]
        if: |
            needs.check-branch.outputs.can_deploy == 'true' &&
            needs.docker-build-push.result == 'success'
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Create Git tag
              run: |
                  git config --local user.email "${{ github.actor }}@users.noreply.github.com"
                  git config --local user.name "${{ github.actor }}"
                  git tag -a "${{ github.event.inputs.release_tag }}" -m "Release ${{ github.event.inputs.release_tag }}"
                  git push origin "${{ github.event.inputs.release_tag }}"

            - name: Create GitHub Release
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  # Preparar flags para el comando gh release create
                  RELEASE_FLAGS=""

                  if [[ "${{ github.event.inputs.as_draft }}" == "true" ]]; then
                      RELEASE_FLAGS="$RELEASE_FLAGS --draft"
                  fi

                  if [[ "${{ github.event.inputs.is_pre_release }}" == "true" ]]; then
                      RELEASE_FLAGS="$RELEASE_FLAGS --prerelease"
                  fi

                  # Crear el release usando gh CLI
                  gh release create "${{ github.event.inputs.release_tag }}" \
                      --title "${{ github.event.inputs.release_tag }}" \
                      --notes "## Release ${{ github.event.inputs.release_tag }}

                  ### üöÄ Deployment Information
                  - **Branch**: main
                  - **Commit**: ${{ github.sha }}
                  - **Docker Image**: ${{ vars.IMAGE_NAME }}:${{ github.event.inputs.release_tag }}

                  ### üìã Changes
                  This release includes all changes merged to main branch up to commit ${{ github.sha }}." \
                      $RELEASE_FLAGS
