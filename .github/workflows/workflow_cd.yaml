name: CD Workflow

on:
    workflow_dispatch:
        inputs:
            action:
                description: "Select the action to perform"
                required: true
                default: "plan"
                type: choice
                options:
                    - plan # Main branch: Create tag + Terraform plan
                    - deploy # Tag branch: Apply + Create release
                    - destroy # Tag branch: Destroy infrastructure
            release_tag:
                description: "Release tag (e.g., v1.0.0) - Required for main branch actions"
                required: false
                type: string
            is_pre_release:
                description: "Is this a pre-release?"
                required: true
                type: boolean
                default: false
            as_draft:
                description: "Create the release as a draft"
                required: true
                default: false
                type: boolean
            clean_registry:
                description: "Clean untagged images from the registry"
                required: false
                type: boolean
                default: false

jobs:
    check-context:
        runs-on: ubuntu-latest
        outputs:
            can_proceed: ${{ steps.check.outputs.can_proceed }}
            is_main_branch: ${{ steps.check.outputs.is_main_branch }}
            is_tag_branch: ${{ steps.check.outputs.is_tag_branch }}
            action_type: ${{ steps.check.outputs.action_type }}
            current_tag: ${{ steps.check.outputs.current_tag }}
        steps:
            - name: Check branch and action context
              id: check
              run: |
                  REF_TYPE="${{ github.ref_type }}"
                  BRANCH_NAME="${{ github.ref_name }}"
                  ACTION="${{ github.event.inputs.action }}"
                  INPUT_TAG="${{ github.event.inputs.release_tag }}"

                  echo "üîç GitHub Context:"
                  echo "  Ref Type: $REF_TYPE"
                  echo "  Ref Name: $BRANCH_NAME"
                  echo "  Action: $ACTION"
                  echo "  Input Tag: $INPUT_TAG"

                  # Determinar el contexto basado en ref_type
                  if [[ "$REF_TYPE" == "branch" && "$BRANCH_NAME" == "main" ]]; then
                      echo "is_main_branch=true" >> $GITHUB_OUTPUT
                      echo "is_tag_branch=false" >> $GITHUB_OUTPUT

                      # Validar que se proporcione tag para acciones en main
                      if [[ -z "$INPUT_TAG" ]]; then
                          echo "‚ùå Main branch requires 'release_tag' input"
                          echo "can_proceed=false" >> $GITHUB_OUTPUT
                          exit 1
                      fi

                      echo "current_tag=$INPUT_TAG" >> $GITHUB_OUTPUT

                      if [[ "$ACTION" == "plan" || "$ACTION" == "deploy" ]]; then
                          echo "‚úÖ Main branch + $ACTION action: Valid context"
                          if [[ "$ACTION" == "deploy" ]]; then
                              echo "üìù Will create tag: $INPUT_TAG"
                          else
                              echo "üìù Will only plan, no tag creation"
                          fi
                          echo "can_proceed=true" >> $GITHUB_OUTPUT
                          echo "action_type=$ACTION" >> $GITHUB_OUTPUT
                      else
                          echo "‚ùå Main branch only allows 'plan' or 'deploy' actions"
                          echo "can_proceed=false" >> $GITHUB_OUTPUT
                          exit 1
                      fi

                  elif [[ "$REF_TYPE" == "tag" ]]; then
                      echo "is_main_branch=false" >> $GITHUB_OUTPUT
                      echo "is_tag_branch=true" >> $GITHUB_OUTPUT
                      echo "current_tag=$BRANCH_NAME" >> $GITHUB_OUTPUT

                      echo "‚úÖ Tag branch ($BRANCH_NAME) + $ACTION action: Valid context"
                      echo "üè∑Ô∏è Using tag from branch: $BRANCH_NAME"
                      echo "can_proceed=true" >> $GITHUB_OUTPUT
                      echo "action_type=$ACTION" >> $GITHUB_OUTPUT

                  else
                      echo "‚ùå Invalid context:"
                      echo "  - Ref Type: $REF_TYPE (expected: 'branch' or 'tag')"
                      echo "  - Ref Name: $BRANCH_NAME (expected: 'main' for branch or tag name for tag)"
                      echo "can_proceed=false" >> $GITHUB_OUTPUT
                      echo "is_main_branch=false" >> $GITHUB_OUTPUT
                      echo "is_tag_branch=false" >> $GITHUB_OUTPUT
                      echo "current_tag=" >> $GITHUB_OUTPUT
                      exit 1
                  fi
    frontend-lint:
        uses: ./.github/workflows/job_frontend_lint.yaml
        needs: check-context
        if: |
            needs.check-context.outputs.can_proceed == 'true' &&
            needs.check-context.outputs.action_type != 'destroy'
        with:
            node_version: "22"

    frontend-build-and-test:
        uses: ./.github/workflows/job_frontend_build_and_test.yaml
        needs: [check-context, frontend-lint]
        if: |
            needs.check-context.outputs.can_proceed == 'true' &&
            needs.check-context.outputs.action_type != 'destroy' &&
            needs.frontend-lint.result == 'success'
        with:
            node_version: "22"
            run_tests: false

    backend-build-and-test:
        uses: ./.github/workflows/job_backend_build_and_test.yaml
        needs: [check-context, frontend-lint]
        if: |
            needs.check-context.outputs.can_proceed == 'true' &&
            needs.check-context.outputs.action_type != 'destroy' &&
            needs.frontend-lint.result == 'success'
        with:
            dotnet_version: "8.0.x"
            run_tests: true
            configuration: "Release"

    terraform-format:
        uses: ./.github/workflows/job_terraform_infrastructure.yaml
        needs: [check-context, frontend-build-and-test, backend-build-and-test]
        if: |
            needs.check-context.outputs.can_proceed == 'true' &&
            needs.check-context.outputs.action_type != 'destroy' &&
            needs.frontend-build-and-test.result == 'success' &&
            needs.backend-build-and-test.result == 'success'
        with:
            terraform_action: "format"
            working_directory: "IaC/cloud-services"

    terraform-validate:
        uses: ./.github/workflows/job_terraform_infrastructure.yaml
        needs: [check-context, frontend-build-and-test, backend-build-and-test]
        if: |
            needs.check-context.outputs.can_proceed == 'true' &&
            needs.check-context.outputs.action_type != 'destroy' &&
            needs.frontend-build-and-test.result == 'success' &&
            needs.backend-build-and-test.result == 'success'
        with:
            terraform_action: "validate"
            working_directory: "IaC/cloud-services"
        secrets:
            DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
            TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

    terraform-plan:
        uses: ./.github/workflows/job_terraform_infrastructure.yaml
        needs: [check-context, terraform-format, terraform-validate]
        if: |
            needs.check-context.outputs.can_proceed == 'true' &&
            needs.check-context.outputs.action_type != 'destroy' &&
            needs.terraform-format.result == 'success' &&
            needs.terraform-validate.result == 'success'
        with:
            terraform_action: "plan"
            working_directory: "IaC/cloud-services"
        secrets:
            DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
            TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

    create-tag:
        runs-on: ubuntu-latest
        needs: [check-context, terraform-plan]
        if: |
            needs.check-context.outputs.can_proceed == 'true' &&
            needs.check-context.outputs.is_main_branch == 'true' &&
            needs.check-context.outputs.action_type == 'deploy' &&
            needs.terraform-plan.result == 'success'
        permissions:
            contents: write
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Create Git tag
              run: |
                  git config --local user.email "${{ github.actor }}@users.noreply.github.com"
                  git config --local user.name "${{ github.actor }}"

                  TAG_NAME="${{ needs.check-context.outputs.current_tag }}"

                  # Check if the tag already exists
                  if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
                      echo "‚ö†Ô∏è Tag $TAG_NAME already exists, skipping creation"
                  else
                      echo "üè∑Ô∏è Creating tag $TAG_NAME"
                      git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
                      git push origin "$TAG_NAME"
                      echo "‚úÖ Tag created successfully"
                  fi

    terraform-apply:
        uses: ./.github/workflows/job_terraform_infrastructure.yaml
        needs: [check-context, terraform-plan]
        if: |
            needs.check-context.outputs.can_proceed == 'true' &&
            needs.check-context.outputs.is_tag_branch == 'true' &&
            needs.check-context.outputs.action_type == 'deploy' &&
            needs.terraform-plan.result == 'success'
        with:
            terraform_action: "apply"
            working_directory: "IaC/cloud-services"
        secrets:
            DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
            TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

    terraform-destroy:
        uses: ./.github/workflows/job_terraform_infrastructure.yaml
        needs: check-context
        if: |
            needs.check-context.outputs.can_proceed == 'true' &&
            needs.check-context.outputs.is_tag_branch == 'true' &&
            needs.check-context.outputs.action_type == 'destroy'
        with:
            terraform_action: "destroy"
            working_directory: "IaC/cloud-services"
        secrets:
            DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
            TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

    docker-build-push:
        uses: ./.github/workflows/job_docker_build_push.yaml
        needs: [check-context, terraform-apply]
        if: |
            needs.check-context.outputs.can_proceed == 'true' &&
            needs.check-context.outputs.is_tag_branch == 'true' &&
            needs.check-context.outputs.action_type == 'deploy' &&
            needs.terraform-apply.result == 'success'
        with:
            release_tag: ${{ needs.check-context.outputs.current_tag }}
            image_name: ${{ fromJSON(needs.terraform-apply.outputs.terraform_outputs).registry_endpoint.value }}/${{ vars.IMAGE_NAME }}
            clean_registry: ${{ github.event.inputs.clean_registry == 'true' }}
        secrets:
            DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    create-release:
        runs-on: ubuntu-latest
        needs: [check-context, docker-build-push]
        if: |
            needs.check-context.outputs.can_proceed == 'true' &&
            needs.check-context.outputs.is_tag_branch == 'true' &&
            needs.check-context.outputs.action_type == 'deploy' &&
            needs.docker-build-push.result == 'success'
        permissions:
            contents: write
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Create GitHub Release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  TAG_NAME="${{ needs.check-context.outputs.current_tag }}"

                  # Preparar flags para el comando gh release create
                  RELEASE_FLAGS=""

                  if [[ "${{ github.event.inputs.as_draft }}" == "true" ]]; then
                      RELEASE_FLAGS="$RELEASE_FLAGS --draft"
                  fi

                  if [[ "${{ github.event.inputs.is_pre_release }}" == "true" ]]; then
                      RELEASE_FLAGS="$RELEASE_FLAGS --prerelease"
                  fi

                  # Crear el release usando gh CLI
                  gh release create "$TAG_NAME" \
                      --title "$TAG_NAME" \
                      --notes "## Release $TAG_NAME

                  ### üöÄ Deployment Information
                  - **Branch**: ${{ github.ref_name }}
                  - **Commit**: ${{ github.sha }}

                  ### üìã Changes
                  This release includes all changes merged to main branch up to commit ${{ github.sha }}." \
                      $RELEASE_FLAGS
