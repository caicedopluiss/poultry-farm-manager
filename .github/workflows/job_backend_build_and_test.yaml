name: Backend Build & Test
on:
    workflow_call:
        inputs:
            dotnet_version:
                description: ".NET version"
                required: false
                type: string
                default: "8.0.x"
            run_tests:
                description: "Run backend tests"
                required: false
                type: boolean
                default: true
            configuration:
                description: "Build configuration"
                required: false
                type: string
                default: "Release"

jobs:
    backend-build-test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ inputs.dotnet_version }}

            - name: Cache NuGet packages
              uses: actions/cache@v4
              with:
                  path: ~/.nuget/packages
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj', '**/*.sln') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget-*
            - name: Restore backend dependencies
              working-directory: . # root (sln file location)
              run: dotnet restore

            - name: Build backend
              working-directory: . # root (sln file location)
              run: dotnet build --configuration ${{ inputs.configuration }} --no-restore

            - name: Docker Compose Up
              working-directory: server/Tests/PoultryFarmManager.Tests.Integration
              run: docker compose up -d

            - name: Wait for database healthy status
              run: |
                  for i in {1..60}; do
                  STATUS=$(docker inspect --format='{{.State.Health.Status}}' pfm-test-postgresql)
                  if [ "$STATUS" = "healthy" ]; then
                      echo "PostgreSQL database is healthy!"
                      break
                  fi
                  echo "Waiting for PostgreSQL health... (attempt $i/60)"
                  sleep 2
                  done

                  # Check if we exited the loop due to timeout
                  if [ "$STATUS" != "healthy" ]; then
                    echo "Timeout: PostgreSQL database failed to become healthy within 120 seconds"
                    docker logs pfm-test-postgresql
                    exit 1
                  fi

            - name: Run backend tests
              if: ${{ inputs.run_tests }}
              working-directory: . # root (sln file location)
              run: dotnet test --no-build --no-restore --configuration ${{ inputs.configuration }}

            - name: Docker Compose Down
              if: always()
              working-directory: server/Tests/PoultryFarmManager.Tests.Integration
              run: docker compose down -v
