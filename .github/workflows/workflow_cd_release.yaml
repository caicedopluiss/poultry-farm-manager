name: Release Workflow

on:
    workflow_dispatch:
        inputs:
            release_tag:
                description: "Release tag (e.g., v1.0.0)"
                required: true
                type: string
            is_pre_release:
                description: "Is this a pre-release?"
                required: true
                type: boolean
                default: false

jobs:
    check-context:
        runs-on: ubuntu-latest
        outputs:
            can_proceed: ${{ steps.check.outputs.can_proceed }}
        steps:
            - name: Check if running on main branch
              id: check
              run: |
                  if [[ "${{ github.ref_name }}" != "main" ]]; then
                      echo "❌ This workflow can only run on main branch"
                      echo "Current branch: ${{ github.ref_name }}"
                      echo "can_proceed=false" >> $GITHUB_OUTPUT
                      exit 1
                  else
                      echo "✅ Running on main branch"
                      echo "can_proceed=true" >> $GITHUB_OUTPUT
                  fi

    frontend-lint:
        uses: ./.github/workflows/job_frontend_lint.yaml
        needs: check-context
        if: needs.check-context.outputs.can_proceed == 'true'
        with:
            node_version: "22"

    tf-format-cloud:
        uses: ./.github/workflows/job_terraform_infrastructure.yaml
        needs: check-context
        if: |
            needs.check-context.outputs.can_proceed == 'true'
        with:
            terraform_action: "format"
            working_directory: "IaC/cloud"

    tf-format-application:
        uses: ./.github/workflows/job_terraform_infrastructure.yaml
        needs: check-context
        if: |
            needs.check-context.outputs.can_proceed == 'true'
        with:
            terraform_action: "format"
            working_directory: "IaC/application"

    tf-validate-cloud:
        uses: ./.github/workflows/job_terraform_infrastructure.yaml
        needs: check-context
        if: |
            needs.check-context.outputs.can_proceed == 'true'
        with:
            terraform_action: "validate"
            working_directory: "IaC/cloud"
        secrets:
            DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
            TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

    tf-validate-application:
        uses: ./.github/workflows/job_terraform_infrastructure.yaml
        needs: check-context
        if: |
            needs.check-context.outputs.can_proceed == 'true'
        with:
            terraform_action: "validate"
            working_directory: "IaC/application"
        secrets:
            DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
            TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

    frontend-build-and-test:
        uses: ./.github/workflows/job_frontend_build_and_test.yaml
        needs:
            [
                frontend-lint,
                tf-format-application,
                tf-format-cloud,
                tf-validate-application,
                tf-validate-cloud,
            ]
        if: |
            needs.frontend-lint.result == 'success' &&
            needs.tf-format-cloud.result == 'success' &&
            needs.tf-format-application.result == 'success' &&
            needs.tf-validate-cloud.result == 'success' &&
            needs.tf-validate-application.result == 'success'
        with:
            node_version: "22"
            run_tests: false

    backend-build-and-test:
        uses: ./.github/workflows/job_backend_build_and_test.yaml
        needs:
            [
                frontend-lint,
                tf-format-application,
                tf-format-cloud,
                tf-validate-application,
                tf-validate-cloud,
            ]
        if: |
            needs.frontend-lint.result == 'success' &&
            needs.tf-format-cloud.result == 'success' &&
            needs.tf-format-application.result == 'success' &&
            needs.tf-validate-cloud.result == 'success' &&
            needs.tf-validate-application.result == 'success'
        with:
            dotnet_version: "8.0.x"
            run_tests: true
            configuration: "Release"

    tf-plan-cloud:
        uses: ./.github/workflows/job_terraform_infrastructure.yaml
        needs: [frontend-build-and-test, backend-build-and-test]
        if: |
            needs.frontend-build-and-test.result == 'success' &&
            needs.backend-build-and-test.result == 'success'
        with:
            terraform_action: "plan"
            working_directory: "IaC/cloud"
        secrets:
            DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
            TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

    tf-plan-application:
        uses: ./.github/workflows/job_terraform_infrastructure.yaml
        needs: [frontend-build-and-test, backend-build-and-test]
        if: |
            needs.frontend-build-and-test.result == 'success' &&
            needs.backend-build-and-test.result == 'success'
        with:
            terraform_action: "plan"
            working_directory: "IaC/application"
            env_vars: |
                TF_VAR_image_name=${{ vars.IMAGE_NAME }}
                TF_VAR_image_tag=${{ github.event.inputs.release_tag }}
                TF_VAR_api_base_path=${{ vars.API_URL_PROD }}
                TF_VAR_ignore_project=true
                TF_VAR_env=Production
        secrets:
            DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
            TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

    create-tag-and-release:
        runs-on: ubuntu-latest
        needs: [tf-plan-cloud, tf-plan-application]
        if: |
            needs.tf-plan-cloud.result == 'success' &&
            needs.tf-plan-application.result == 'success'
        permissions:
            contents: write
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Create Git tag
              run: |
                  git config --local user.email "${{ github.actor }}@users.noreply.github.com"
                  git config --local user.name "${{ github.actor }}"

                  TAG_NAME="${{ github.event.inputs.release_tag }}"

                  # Check if the tag already exists
                  if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
                      echo "⚠️ Tag $TAG_NAME already exists, skipping creation"
                  else
                      echo "🏷️ Creating tag $TAG_NAME"
                      git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
                      git push origin "$TAG_NAME"
                      echo "✅ Tag created successfully"
                  fi

            - name: Create GitHub Release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  TAG_NAME="${{ github.event.inputs.release_tag }}"
                  BRANCH_NAME="${{ github.ref_name }}"
                  COMMIT_SHA="${{ github.sha }}"

                  # Prepare release flags (no draft)
                  RELEASE_FLAGS=""

                  if [[ "${{ github.event.inputs.is_pre_release }}" == "true" ]]; then
                      RELEASE_FLAGS="$RELEASE_FLAGS --prerelease"
                  fi

                  # Create the published release
                  gh release create "$TAG_NAME" \
                      --title "$TAG_NAME" \
                      --notes "## Release $TAG_NAME

                  ### 🚀 Deployment Information
                  - **Branch**: ${{ github.ref_name }}
                  - **Commit**: ${{ github.sha }}

                  ### 📋 Changes
                  This release includes all changes merged to main branch up to commit ${{ github.sha }}." \
                      $RELEASE_FLAGS

                  echo "✅ Release $TAG_NAME published successfully"
                  echo "🎯 Next: Run the Deploy workflow on tag branch '$TAG_NAME'"

                  # Add to step summary
                  echo "### ✅ Release Setup Completed" >> $GITHUB_STEP_SUMMARY
                  echo "**Tag Created**: $TAG_NAME" >> $GITHUB_STEP_SUMMARY
                  echo "**Release Published**: $TAG_NAME is now live" >> $GITHUB_STEP_SUMMARY
                  echo "**Next Steps**: Run Deploy workflow on tag branch $TAG_NAME" >> $GITHUB_STEP_SUMMARY
