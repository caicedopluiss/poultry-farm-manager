name: CD

on:
    push:
        branches:
            - "main"
            - "staging"
            - "dev"
            - "feature/**"
    workflow_dispatch:
        inputs:
            action:
                description: "Select the action to perform"
                required: true
                default: "deploy"
                type: choice
                options:
                    - deploy
                    - destroy
            clean_registry:
                description: "Clean untagged images from the registry"
                required: false
                type: boolean
                default: false

jobs:
    # ✅ Configurar entorno
    environment-setup:
        uses: ./.github/workflows/reusable-environment-setup.yaml

    # ✅ Determinar API URL para el entorno
    determine-api-url:
        runs-on: ubuntu-latest
        needs: environment-setup
        if: |
            needs.environment-setup.outputs.should_deploy == 'true' &&
            needs.environment-setup.outputs.action == 'deploy'
        outputs:
            api_url: ${{ steps.set-url.outputs.api_url }}
        steps:
            - name: Set API URL
              id: set-url
              run: |
                  if [[ "${{ needs.environment-setup.outputs.environment }}" == "main" ]]; then
                      echo "api_url=${{ vars.API_URL_PRODUCTION }}" >> $GITHUB_OUTPUT
                  elif [[ "${{ needs.environment-setup.outputs.environment }}" == "staging" ]]; then
                      echo "api_url=${{ vars.API_URL_STAGING }}" >> $GITHUB_OUTPUT
                  else
                      echo "api_url=${{ vars.API_URL_DEV }}" >> $GITHUB_OUTPUT
                  fi

    # ✅ Build y test frontend
    frontend-build:
        uses: ./.github/workflows/reusable-frontend-build.yaml
        needs: environment-setup
        if: |
            needs.environment-setup.outputs.should_deploy == 'true' &&
            needs.environment-setup.outputs.action == 'deploy'
        with:
            node_version: "22"
            run_tests: false

    # ✅ Build y test backend
    backend-build-test:
        uses: ./.github/workflows/reusable-backend-build-test.yaml
        needs: environment-setup
        if: |
            needs.environment-setup.outputs.should_deploy == 'true' &&
            needs.environment-setup.outputs.action == 'deploy'
        with:
            dotnet_version: "8.0.x"
            run_tests: true
            configuration: "Release"

    # ✅ Verificar que CI pasó exitosamente
    verify-ci-success:
        runs-on: ubuntu-latest
        needs: [environment-setup, frontend-build, backend-build-test]
        if: |
            needs.environment-setup.outputs.should_deploy == 'true' &&
            needs.environment-setup.outputs.action == 'deploy'
        outputs:
            ci_passed: ${{ steps.check.outputs.ci_passed }}
        steps:
            - name: Check CI results
              id: check
              run: |
                  if [[ "${{ needs.frontend-build.result }}" == "success" && "${{ needs.backend-build-test.result }}" == "success" ]]; then
                      echo "ci_passed=true" >> $GITHUB_OUTPUT
                      echo "✅ CI passed successfully"
                  else
                      echo "ci_passed=false" >> $GITHUB_OUTPUT
                      echo "❌ CI failed"
                      exit 1
                  fi

    # ✅ Build y push imagen Docker
    docker-build-push:
        uses: ./.github/workflows/reusable-docker-build-push.yaml
        needs: [environment-setup, determine-api-url, verify-ci-success]
        if: |
            needs.environment-setup.outputs.should_deploy == 'true' &&
            needs.environment-setup.outputs.action == 'deploy' &&
            needs.determine-api-url.result == 'success' &&
            needs.verify-ci-success.outputs.ci_passed == 'true'
        with:
            environment: ${{ needs.environment-setup.outputs.environment }}
            api_url: ${{ needs.determine-api-url.outputs.api_url }}
            image_name: ${{ vars.IMAGE_NAME }}
            clean_registry: ${{ github.event.inputs.clean_registry }}
        secrets:
            DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
