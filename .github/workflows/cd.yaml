name: CD

on:
    push:
        branches:
            - "feature/**"
            - dev
            - staging
            - main
    workflow_dispatch:
        inputs:
            action:
                description: "Select the action to perform"
                required: true
                default: "deploy"
                type: choice
                options:
                    - deploy
                    - destroy
            clean_registry:
                description: "Clean untagged images from the registry"
                required: false
                type: boolean
                default: false

jobs:
    determine-environment:
        runs-on: ubuntu-latest
        outputs:
            environment: ${{ steps.set-env.outputs.environment }}
            should_deploy: ${{ steps.set-env.outputs.should_deploy }}
            action: ${{ github.event.inputs.action || 'deploy' }}
        steps:
            - name: Set environment variable
              id: set-env
              run: |
                  branch_name="${GITHUB_REF#refs/heads/}"
                  if [[ "$branch_name" == "main" || "$branch_name" == "staging" || "$branch_name" == "dev" || "$branch_name" == "feature/"* ]]; then
                    echo "should_deploy=true" >> $GITHUB_OUTPUT
                  else
                    echo "should_deploy=false" >> $GITHUB_OUTPUT
                  fi
                  echo "environment=$branch_name" >> $GITHUB_OUTPUT
                  echo "Environment: $branch_name"

    push-images:
        runs-on: ubuntu-latest
        needs: determine-environment
        if: |
            needs.determine-environment.outputs.should_deploy == 'true' &&
            needs.determine-environment.outputs.action == 'deploy'
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set API URL
              id: set-urls
              run: |
                  if [[ "${{ needs.determine-environment.outputs.environment }}" == "main" ]]; then
                        echo "api_url=${{ vars.API_URL_PRODUCTION }}" >> $GITHUB_OUTPUT
                    elif [[ "${{ needs.determine-environment.outputs.environment }}" == "staging" ]]; then
                        echo "api_url=${{ vars.API_URL_STAGING }}" >> $GITHUB_OUTPUT
                    else
                        echo "api_url=${{ vars.API_URL_DEV || 'https://api-dev.poultry-farm.com' }}" >> $GITHUB_OUTPUT
                    fi

            - name: Install doctl
              uses: digitalocean/action-doctl@v2
              with:
                  token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

            - name: Login to DigitalOcean Container Registry
              run: doctl registry login

            - name: Build Docker image
              run: |
                  TAG="${{ needs.determine-environment.outputs.environment }}-${{ github.sha }}"
                  LATEST_TAG="${{ needs.determine-environment.outputs.environment }}"

                  echo "Building image with tag: $TAG"

                  docker build \
                    --build-arg API_URL="${{ steps.set-urls.outputs.api_url }}" \
                    -t ${{ vars.IMAGE_NAME }}:$TAG \
                    -t ${{ vars.IMAGE_NAME }}:$LATEST_TAG \
                    .

            # ✅ 6. Push de las imágenes
            - name: Push images to registry
              run: |
                  TAG="${{ needs.determine-environment.outputs.environment }}-${{ github.sha }}"
                  LATEST_TAG="${{ needs.determine-environment.outputs.environment }}

                  echo "Pushing images..."
                  docker push ${{ vars.IMAGE_NAME }}:$TAG
                  docker push ${{ vars.IMAGE_NAME }}:$LATEST_TAG

            - name: Clean untagged images from registry
              if: ${{ github.event.inputs.clean_registry }}
              run: |
                  echo "Starting garbage collection..."
                  doctl registry garbage-collection start --include-untagged-manifests || echo "Garbage collection failed or already running"

        outputs:
            image_tag: ${{ needs.determine-environment.outputs.environment }}-${{ github.sha }}
